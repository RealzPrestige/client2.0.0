Index: src/main/java/client/modules/core/ClickGui.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package client.modules.core;\r\n\r\nimport client.Client;\r\nimport client.events.ClientEvent;\r\nimport client.gui.ClientGui;\r\nimport client.gui.impl.setting.Setting;\r\nimport client.modules.Module;\r\nimport client.util.Util;\r\nimport net.minecraftforge.fml.common.eventhandler.SubscribeEvent;\r\nimport org.lwjgl.input.Keyboard;\r\n\r\npublic class ClickGui extends Module {\r\n    private static ClickGui INSTANCE = new ClickGui();\r\n    public int yaw;\r\n    public Setting<Gui> gui = this.register(new Setting(\"Gui\", Gui.OLD));\r\n    //NEW GUI\r\n    public Setting<Boolean> chamsViewer = this.register(new Setting<>(\"ChamsViewer\", false, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Boolean> logo = this.register(new Setting<>(\"Logo\", true, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Boolean> newBlur = this.register(new Setting<>(\"Blur\", true, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newtopred = this.register(new Setting<>(\"TopRed\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newtopgreen = this.register(new Setting<>(\"TopGreen\", 0, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newtopblue = this.register(new Setting<>(\"TopBlue\", 0, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newtopalpha = this.register(new Setting<>(\"TopAlpha\", 110, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newared = this.register(new Setting<>(\"Red\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newagreen = this.register(new Setting<>(\"Green\", 0, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newablue = this.register(new Setting<>(\"Blue\", 0, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newaalpha = this.register(new Setting<>(\"Alpha\", 110, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newred = this.register(new Setting<>(\"SideRed\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newgreen = this.register(new Setting<>(\"SideGreen\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newblue = this.register(new Setting<>(\"SideBlue\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newtheAlpha = this.register(new Setting<>(\"SideAlpha\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newbgred = this.register(new Setting<>(\"BackGroundRed\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newbggreen = this.register(new Setting<>(\"BackGroundGreen\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newbgblue = this.register(new Setting<>(\"BackGroundBlue\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newbgAlpha = this.register(new Setting<>(\"BackGroundAlpha\", 27, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newthirdRed = this.register(new Setting<>(\"ThirdRed\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newthirdGreen = this.register(new Setting<>(\"ThirdGreen\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newthirdBlue = this.register(new Setting<>(\"ThirdBlue\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> newthirdAlpha = this.register(new Setting<>(\"ThirdAlpha\", 255, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> integerRed = this.register(new Setting<>(\"IntegerRed\", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> integerGreen = this.register(new Setting<>(\"IntegerGreen\", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> integerBlue = this.register(new Setting<>(\"IntegerBlue\", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> integerAlpha = this.register(new Setting<>(\"IntegerAlpha\", 120, 0, 255, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Boolean> seperateBooleanColors = this.register(new Setting<>(\"SeperateBooleanColors\", false, v -> gui.getCurrentState() == Gui.NEW));\r\n    public Setting<Integer> stateFalseBooleanRed = this.register(new Setting<>(\"BooleanFalseRed\", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));\r\n    public Setting<Integer> stateFalseBooleanGreen = this.register(new Setting<>(\"BooleanFalseGreen\", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));\r\n    public Setting<Integer> stateFalseBooleanBlue = this.register(new Setting<>(\"BooleanFalseBlue\", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));\r\n    public Setting<Integer> stateFalseBooleanAlpha = this.register(new Setting<>(\"BooleanFalseAlpha\", 120, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));\r\n    public Setting<Integer> stateTrueBooleanRed = this.register(new Setting<>(\"BooleanTrueRed\", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));\r\n    public Setting<Integer> stateTrueBooleanGreen = this.register(new Setting<>(\"BooleanTrueGreen\", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));\r\n    public Setting<Integer> stateTrueBooleanBlue = this.register(new Setting<>(\"BooleanTrueBlue\", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));\r\n    public Setting<Integer> stateTrueBooleanAlpha = this.register(new Setting<>(\"BooleanTrueAlpha\", 120, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));\r\n\r\n    //OLD GUI\r\n    public Setting<Boolean> topRectTextBold = this.register(new Setting(\"TopRectTextBold\", true, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Rect> topRect = this.register(new Setting(\"TopRectangle\", Rect.ROUNDED, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Roundedness> roundedness = this.register(new Setting(\"Roundedness\", Roundedness.FULL, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Bottom> bottomRect = this.register(new Setting(\"BottomRect\", Bottom.ROUNDED, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Boolean> particles = this.register(new Setting(\"Particles\", true, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> particleLength = this.register(new Setting(\"ParticleLength\", 50, 0, 300, v -> particles.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> particlered = this.register(new Setting(\"ParticleRed\", 255, 0, 255, v -> particles.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> particlegreen = this.register(new Setting(\"ParticleGreen\", 255, 0, 255, v -> particles.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> particleblue = this.register(new Setting(\"ParticleBlue\", 255, 0, 255, v -> particles.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Boolean> snowing = this.register(new Setting(\"Snowing\", true, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Boolean> blur = this.register(new Setting(\"Blur\", true, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Align> componentAlign = this.register(new Setting(\"ComponentAlign\", Align.LEFT, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<String> prefix = this.register(new Setting(\"Prefix\", \":\", v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> red = this.register(new Setting(\"BackgroundRed\", 0, 0, 255, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> green = this.register(new Setting(\"BackgroundGreen\", 0, 0, 255, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> blue = this.register(new Setting(\"BackgroundBlue\", 0, 0, 255, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> b_alpha = this.register(new Setting(\"BackgroundAlpha\", 50, 0, 255, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Boolean> disabled = this.register(new Setting(\"Disabled\", true, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> d_red = this.register(new Setting(\"DisabledRed\", 127, 0, 255, v -> this.disabled.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> d_green = this.register(new Setting(\"DisabledGreen\", 127, 0, 255, v -> this.disabled.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> d_blue = this.register(new Setting(\"DisabledBlue\", 127, 0, 255, v -> this.disabled.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> d_alpha = this.register(new Setting(\"DisabledAlpha\", 40, 0, 255, v -> this.disabled.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> alpha = this.register(new Setting(\"EnabledAlpha\", 255, 0, 255, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> topRed = this.register(new Setting(\"SecondRed\", 0, 0, 255, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> topGreen = this.register(new Setting(\"SecondGreen\", 0, 0, 255, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> topBlue = this.register(new Setting(\"SecondBlue\", 150, 0, 255, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> secondAlpha = this.register(new Setting(\"SecondAlpha\", 255, 0, 255, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Boolean> outline = this.register(new Setting(\"Outline\", false, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> o_red = this.register(new Setting(\"OutlineRed\", 0, 0, 255, v -> outline.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> o_green = this.register(new Setting(\"OutlineGreen\", 0, 0, 255, v -> outline.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> o_blue = this.register(new Setting(\"OutlineBlue\", 150, 0, 255, v -> outline.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> o_alpha = this.register(new Setting(\"OutlineAlpha\", 255, 0, 255, v -> outline.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Boolean> button = this.register(new Setting(\"Button\", true, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Button> buttonButton = this.register(new Setting(\"ButtonSort\", Button.PLUS, v -> button.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Boolean> rainbow = this.register(new Setting(\"Rainbow\", false, v -> gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Integer> rainbowHue = this.register(new Setting<Object>(\"Delay\", 240, 0, 600, v -> this.rainbow.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Float> rainbowBrightness = this.register(new Setting<Object>(\"Brightness \", 150.0f, 1.0f, 255.0f, v -> this.rainbow.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n    public Setting<Float> rainbowSaturation = this.register(new Setting<Object>(\"Saturation\", 150.0f, 1.0f, 255.0f, v -> this.rainbow.getCurrentState() && gui.getCurrentState() == Gui.OLD));\r\n\r\n    public ClickGui() {\r\n        super(\"ClickGui\", \"Opens the ClickGui that contains all modules.\", Category.CORE);\r\n        setBind(Keyboard.KEY_O);\r\n        this.setInstance();\r\n    }\r\n\r\n    public static ClickGui getInstance() {\r\n        if (INSTANCE == null) {\r\n            INSTANCE = new ClickGui();\r\n        }\r\n        return INSTANCE;\r\n    }\r\n\r\n    private void setInstance() {\r\n        INSTANCE = this;\r\n    }\r\n\r\n    @SubscribeEvent\r\n    public void onSettingChange(ClientEvent event) {\r\n        if (event.getStage() == 2 && event.getSetting().getFeature().equals(this)) {\r\n            if (event.getSetting().equals(this.prefix)) {\r\n                Client.commandManager.setPrefix(this.prefix.getPlannedValue());\r\n            }\r\n            Client.colorManager.setColor(this.red.getPlannedValue(), this.green.getPlannedValue(), this.blue.getPlannedValue(), this.alpha.getPlannedValue());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        Util.mc.displayGuiScreen(ClientGui.getClickGui());\r\n    }\r\n\r\n    @Override\r\n    public void onDisable() {\r\n        Client.configManager.saveConfig(\"Default\");\r\n    }\r\n\r\n    @Override\r\n    public void onLoad() {\r\n        Client.colorManager.setColor(this.red.getCurrentState(), this.green.getCurrentState(), this.blue.getCurrentState(), this.alpha.getCurrentState());\r\n        Client.commandManager.setPrefix(this.prefix.getCurrentState());\r\n    }\r\n\r\n    @Override\r\n    public void onTick() {\r\n        if (!(ClickGui.mc.currentScreen instanceof ClientGui)) {\r\n            this.disable();\r\n        }\r\n        ++yaw;\r\n    }\r\n\r\n    public enum Gui {NEW, OLD}\r\n\r\n\r\n    public enum Rect {ROUNDED, SQUARE}\r\n\r\n    public enum Roundedness {TINY, LITTLE, MEDIUM, LARGE, FULL}\r\n\r\n    public enum Bottom {ROUNDED, NORMAL}\r\n\r\n    public enum Align {LEFT, MIDDLE}\r\n\r\n    public enum Button {PLUS, DOT}\r\n\r\n    public enum rainbowMode {\r\n        Static,\r\n        Sideway\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/client/modules/core/ClickGui.java b/src/main/java/client/modules/core/ClickGui.java
--- a/src/main/java/client/modules/core/ClickGui.java	(revision 0ea3b25037ad8084e9a5489ae41a3ef0f951f191)
+++ b/src/main/java/client/modules/core/ClickGui.java	(date 1631062857959)
@@ -41,15 +41,15 @@
     public Setting<Integer> integerGreen = this.register(new Setting<>("IntegerGreen", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW));
     public Setting<Integer> integerBlue = this.register(new Setting<>("IntegerBlue", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW));
     public Setting<Integer> integerAlpha = this.register(new Setting<>("IntegerAlpha", 120, 0, 255, v -> gui.getCurrentState() == Gui.NEW));
-    public Setting<Boolean> seperateBooleanColors = this.register(new Setting<>("SeperateBooleanColors", false, v -> gui.getCurrentState() == Gui.NEW));
-    public Setting<Integer> stateFalseBooleanRed = this.register(new Setting<>("BooleanFalseRed", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
-    public Setting<Integer> stateFalseBooleanGreen = this.register(new Setting<>("BooleanFalseGreen", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
-    public Setting<Integer> stateFalseBooleanBlue = this.register(new Setting<>("BooleanFalseBlue", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
-    public Setting<Integer> stateFalseBooleanAlpha = this.register(new Setting<>("BooleanFalseAlpha", 120, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
-    public Setting<Integer> stateTrueBooleanRed = this.register(new Setting<>("BooleanTrueRed", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
-    public Setting<Integer> stateTrueBooleanGreen = this.register(new Setting<>("BooleanTrueGreen", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
-    public Setting<Integer> stateTrueBooleanBlue = this.register(new Setting<>("BooleanTrueBlue", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
-    public Setting<Integer> stateTrueBooleanAlpha = this.register(new Setting<>("BooleanTrueAlpha", 120, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
+    public Setting<Boolean> seperateBooleanColors = this.register(new Setting<>("BooleanColors", false, v -> gui.getCurrentState() == Gui.NEW));
+    public Setting<Integer> stateFalseBooleanRed = this.register(new Setting<>("DisabledRed", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
+    public Setting<Integer> stateFalseBooleanGreen = this.register(new Setting<>("DisabledGreen", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
+    public Setting<Integer> stateFalseBooleanBlue = this.register(new Setting<>("DisabledBlue", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
+    public Setting<Integer> stateFalseBooleanAlpha = this.register(new Setting<>("DisabledAlpha", 120, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
+    public Setting<Integer> stateTrueBooleanRed = this.register(new Setting<>("EnabledRed", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
+    public Setting<Integer> stateTrueBooleanGreen = this.register(new Setting<>("EnabledGreen", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
+    public Setting<Integer> stateTrueBooleanBlue = this.register(new Setting<>("EnabledBlue", 30, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
+    public Setting<Integer> stateTrueBooleanAlpha = this.register(new Setting<>("EnabledAlpha", 120, 0, 255, v -> gui.getCurrentState() == Gui.NEW && seperateBooleanColors.getCurrentState()));
 
     //OLD GUI
     public Setting<Boolean> topRectTextBold = this.register(new Setting("TopRectTextBold", true, v -> gui.getCurrentState() == Gui.OLD));
Index: src/main/java/client/modules/player/AutoSilentChorus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package client.modules.player;\r\n\r\nimport client.modules.Module;\r\nimport client.util.InventoryUtil;\r\nimport net.minecraft.init.Items;\r\nimport net.minecraft.item.ItemChorusFruit;\r\nimport net.minecraft.network.play.client.CPacketHeldItemChange;\r\n\r\npublic class AutoSilentChorus extends Module {\r\n\r\n    int delay;\r\n\r\n    public AutoSilentChorus(){\r\n        super(\"AutoSilentChorus\", \"Choruses using SilentSwitch and packets.\", Category.PLAYER);\r\n    }\r\n\r\n    public void onTick(){\r\n            ++delay;\r\n    }\r\n\r\n    public void onEnable() {\r\n        int chorusSlot = InventoryUtil.findHotbarBlock(ItemChorusFruit.class);\r\n        if(chorusSlot != -1){\r\n            delay = 0;\r\n            mc.player.connection.sendPacket(new CPacketHeldItemChange(this.getChorusSlot()));\r\n        }\r\n    }\r\n    public void onUpdate(){\r\n        if(delay > 68){\r\n            this.disable();\r\n        }\r\n        if(delay < 68) {\r\n            mc.gameSettings.keyBindUseItem.pressed = true;\r\n        } else {\r\n            mc.gameSettings.keyBindUseItem.pressed = false;\r\n        }\r\n    }\r\n\r\n    public void onDisable(){\r\n        mc.gameSettings.keyBindUseItem.pressed = false;\r\n        int postChorusSlot = mc.player.inventory.currentItem;\r\n        mc.player.connection.sendPacket(new CPacketHeldItemChange(postChorusSlot));\r\n    }\r\n\r\n    private int getChorusSlot() {\r\n        for (int i = 0; i < 9; ++i) {\r\n            if (mc.player.inventory.getStackInSlot(i).getItem() != Items.CHORUS_FRUIT) continue;\r\n            return i;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/client/modules/player/AutoSilentChorus.java b/src/main/java/client/modules/player/AutoSilentChorus.java
--- a/src/main/java/client/modules/player/AutoSilentChorus.java	(revision 0ea3b25037ad8084e9a5489ae41a3ef0f951f191)
+++ b/src/main/java/client/modules/player/AutoSilentChorus.java	(date 1631111241159)
@@ -29,7 +29,7 @@
         if(delay > 68){
             this.disable();
         }
-        if(delay < 68) {
+        if(delay < 68) {    
             mc.gameSettings.keyBindUseItem.pressed = true;
         } else {
             mc.gameSettings.keyBindUseItem.pressed = false;
